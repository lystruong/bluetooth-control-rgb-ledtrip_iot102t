#include <FastLED.h>
#include <SoftwareSerial.h>

// ----- Cấu hình chân và số LED -----
#define NUM_LEDS 30               // Số lượng LED trên dải LED
#define LED_PIN 2                 // Chân Data của WS2812B
#define SOUND_SENSOR_PIN A0        // Cảm biến âm thanh tại A0
#define BLUETOOTH_RX 10            // Chân RX của HC-05
#define BLUETOOTH_TX 11            // Chân TX của HC-05

// ----- Định nghĩa chế độ hoạt động -----
#define MODE_AUTO 0
#define MODE_SOUND 1
#define MODE_MANUAL 2

// ----- Khởi tạo đối tượng FastLED -----
CRGB leds[NUM_LEDS];
SoftwareSerial BTSerial(BLUETOOTH_RX, BLUETOOTH_TX);

// ----- Biến toàn cục -----
int currentMode = MODE_AUTO;
int currentAutoEffect = 1;
unsigned long lastAutoSwitchTime = 0;
const unsigned long autoSwitchInterval = 10000;  // 10 giây đổi hiệu ứng AUTO

int manualEffect = 0;
CRGB manualColor = CRGB(255, 255, 255);  // Mặc định màu trắng

void setup() {
  Serial.begin(9600);
  BTSerial.begin(9600);
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(50);  // Độ sáng vừa phải tránh hao nguồn
  FastLED.clear();
  FastLED.show();
  Serial.println("System Initialized");
  BTSerial.println("System Initialized");
}

void loop() {
  processBluetoothCommands();
  
  switch(currentMode) {
    case MODE_AUTO:
      runAutoMode();
      break;
    case MODE_SOUND:
      runSoundMode();
      break;
    case MODE_MANUAL:
      runManualMode();
      break;
  }
}

// ----- Xử lý Bluetooth -----
void processBluetoothCommands() {
  if (BTSerial.available()) {
    String cmd = "";
    while (BTSerial.available()) {
      char c = BTSerial.read();
      if (c == '\n' || c == '\r') break;
      cmd += c;
    }
    cmd.trim();  // Xóa khoảng trắng đầu/cuối

    Serial.print("Received Command: [");
    Serial.print(cmd);
    Serial.println("]");

    // Xử lý lệnh ngắn
    if (cmd.equalsIgnoreCase("A")) {
      currentMode = MODE_AUTO;
      BTSerial.println("Mode set to AUTO");
    } else if (cmd.equalsIgnoreCase("S")) {
      currentMode = MODE_SOUND;
      BTSerial.println("Mode set to SOUND");
    } else if (cmd.equalsIgnoreCase("M")) {
      currentMode = MODE_MANUAL;
      BTSerial.println("Mode set to MANUAL");
    } else if (cmd.startsWith("E")) {
      int effectNum = cmd.substring(1).toInt();
      if (effectNum >= 1 && effectNum <= 5) {
        if (currentMode == MODE_AUTO) {
          currentAutoEffect = effectNum;
        } else if (currentMode == MODE_MANUAL) {
          manualEffect = effectNum;
        }
        BTSerial.print("Effect set to ");
        BTSerial.println(effectNum);
      } else {
        BTSerial.println("Invalid Effect Number!");
      }
    } else if (cmd.startsWith("C")) {
      int r, g, b;
      if (sscanf(cmd.c_str(), "C %d %d %d", &r, &g, &b) == 3) {
        manualColor = CRGB(r, g, b);
        manualEffect = 0;
        BTSerial.println("Manual color updated");
      } else {
        BTSerial.println("Invalid COLOR format!");
      }
    } else if (cmd.equalsIgnoreCase("ST")) {
      BTSerial.print("Current Mode: ");
      if (currentMode == MODE_AUTO) BTSerial.println("AUTO");
      else if (currentMode == MODE_SOUND) BTSerial.println("SOUND");
      else if (currentMode == MODE_MANUAL) BTSerial.println("MANUAL");
    } else if (cmd.startsWith("B")) {
      int brightness = cmd.substring(1).toInt();
      brightness = constrain(brightness, 0, 255);
      FastLED.setBrightness(brightness);
      FastLED.show();
      BTSerial.print("Brightness set to ");
      BTSerial.println(brightness);
    } else {
    }
  }
}


// ----- Chế độ AUTO -----
void runAutoMode() {
  if (millis() - lastAutoSwitchTime >= autoSwitchInterval) {
    currentAutoEffect++;
    if (currentAutoEffect > 5) currentAutoEffect = 1;
    lastAutoSwitchTime = millis();
  }
  switch (currentAutoEffect) {
    case 1: effectRainbowCycle(); break;
    case 2: effectColorWipe(); break;
    case 3: effectTheaterChase(); break;
    case 4: effectBlink(); break;
    case 5: effectSparkle(); break;
  }
}

// ----- Chế độ SOUND -----
void runSoundMode() {
  int soundLevel = analogRead(SOUND_SENSOR_PIN);
  Serial.println(soundLevel);
  int brightness = map(soundLevel, 0, 1023, 50, 255);
  int hue = map(soundLevel, 0, 1023, 0, 255);
  CRGB color = wheel(hue);
  
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = color;
  }
  FastLED.show();
}

// ----- Chế độ MANUAL -----
void runManualMode() {
  if (manualEffect > 0) {
    switch (manualEffect) {
      case 1: effectRainbowCycle(); break;
      case 2: effectColorWipe(); break;
      case 3: effectTheaterChase(); break;
      case 4: effectBlink(); break;
      case 5: effectSparkle(); break;
    }
  } else {
    for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = manualColor;
    }
    FastLED.show();
  }
}

// ----- Hiệu ứng 1: Rainbow Cycle -----
void effectRainbowCycle() {
  static uint16_t j = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = wheel((i * 256 / NUM_LEDS + j) & 0xFF);
  }
  FastLED.show();
  j++;
  delay(20);
}

// ----- Hiệu ứng 2: Color Wipe -----
void effectColorWipe() {
  static int index = 0;
  leds[index] = CRGB(0, 0, 255);
  FastLED.show();
  index = (index + 1) % NUM_LEDS;
  delay(50);
}

// ----- Hiệu ứng 3: Theater Chase -----
void effectTheaterChase() {
  static int j = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = ((i + j) % 3 == 0) ? CRGB::White : CRGB::Black;
  }
  FastLED.show();
  j = (j + 1) % 3;
  delay(100);
}

// ----- Hiệu ứng 4: Blink -----
void effectBlink() {
  static bool state = false;
  state = !state;
  CRGB blinkColor = state ? CRGB(0, 255, 0) : CRGB::Black;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blinkColor;
  }
  FastLED.show();
  delay(500);
}

// ----- Hiệu ứng 5: Sparkle -----
void effectSparkle() {
  int pos = random(NUM_LEDS);
  leds[pos] = CRGB(random(256), random(256), random(256));
  FastLED.show();
  delay(100);
}

// ----- Hàm wheel() chuyển vị trí 0-255 thành màu -----
CRGB wheel(byte pos) {
  if (pos < 85) {
    return CRGB(pos * 3, 255 - pos * 3, 0);
  } else if (pos < 170) {
    pos -= 85;
    return CRGB(255 - pos * 3, 0, pos * 3);
  } else {
    pos -= 170;
    return CRGB(0, pos * 3, 255 - pos * 3);
  }
}
